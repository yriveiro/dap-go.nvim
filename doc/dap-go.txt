================================================================================
NVIM                                                               *dap-go.nvim*

dap-go.nvim is an extension for `nvim-dap` plugin that configures the usage of
Golang debugging over Delve.

Getting started with dap-go:
  1. Run `:checkhealth dap-go` to make sure everything is installed.
  2. Put a `require("dap-go").setup() call somewhere in your neovim config.
  3. Read |dap-go.setup| to check what config keys are available and what you
     can put inside the setup call
  4. Profit

To find out more:
https://github.com/yriveiro/dap-go.nvim

:h dap-go.setup

dapgo.setup({options})                                         *dapgo.setup()*
    Setup function to be run by user. Configures the defaults, pickers and
    extensions of dap-go.

    Usage:
    >
    require('dap-go').setup({
    delay = 100, -- ms
    external_config = {
      --- Enable external config
      enabled = false,
      --- File with the config definitions.
       path = (function()
         local root_dir = require('lspconfig.util').find_git_ancestor(uv.fs_realpath('.')) or '.'
         return root_dir .. '/dap-go.json'
       end)(),
    },

    --- nvim-dap configuration for go.
    dap = {
      configurations = {
        {
          type = 'go',
          name = 'Debug',
          request = 'launch',
          program = '${file}',
        },
        {
          type = 'go',
          name = 'Attach',
          mode = 'local',
          request = 'attach',
          processId = require('dap.utils').pick_process,
        },
      },
    },
    })
<


    Parameters: ~
        {options} (table)  @Configuration opts. Keys: external_config, dap


dapgo.reload({options})                                       *dapgo.reload()*
    Reload dap-go module


    Parameters: ~
        {options} (table)  @Configuration opts. Keys: external_config, dap



================================================================================
CONFIG                                                           *dap-go.config*

Config holds all the configuration to operate the extension.


Config                                                                *Config*
    Expose configuration for the |dap-go.nvim| extension


config.setup({options})                                       *config.setup()*
    Setup function, this function is internally called by |dap-go.setup()| and
    depending on the configuration will load an external config file.

    Usage:
    >
    require('dap-go').setup{
    delay = 100, -- ms
     external_config = {
       --- Enable external config
       enabled = false,
       --- File with the config definitions.
       path = (function()
         local root_dir = require('lspconfig.util').find_git_ancestor(uv.fs_realpath('.')) or '.'
         return root_dir .. '/dap-go.json'
       end)(),
     },

     --- nvim-dap configuration for go.
     dap = {
       configurations = {
         {
           type = 'go',
           name = 'Debug',
           request = 'launch',
           program = '${file}',
         },
         {
           type = 'go',
           name = 'Attach',
           mode = 'local',
           request = 'attach',
           processId = require('dap.utils').pick_process,
         },
       },
     },
    },
<


    Parameters: ~
        {options} (table)  Custom options.



================================================================================
ENV                                                                 *dap-go.env*

This class wraps the `vim.fn.environ` with some functionalities and
validations.

Environment                                                      *Environment*



env.extend({t})                                                 *env.extend()*
    Extends the current enviroment with new data.


    Parameters: ~
        {t} (table)  extended enviroment variables to merge with current ones.


env.dump()                                                        *env.dump()*
    Dumps the content of the class.


    Return: ~
        table: Table with all the enviroment



================================================================================
UTIL                                                               *dap-go.util*

This class provides common functions used in dap-go extension.

Util                                                                    *Util*
    Collection of utility fuctions.


util.json_encode({data})                                  *util.json_encode()*
    Encodes string data to JSON.


    Parameters: ~
        {data} (table)  Data to encode.

    Return: ~
        string: Encoded JSON object.


util.json_decode({data})                                  *util.json_decode()*
    Decodes data from JSON.


    Parameters: ~
        {data} (string)  Data to decode.

    Return: ~
        table: Decoded JSON object.



 vim:tw=78:ts=8:ft=help:norl:
